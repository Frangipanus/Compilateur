State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On SEMICOLON shift to state 1
-- On list(SEMICOLON) shift to state 3
-- On file shift to state 150
## Reductions:
-- On FUN EOF
--   reduce production list(SEMICOLON) ->

State 1:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
list(SEMICOLON) -> SEMICOLON . list(SEMICOLON) [ VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF ]
## Transitions:
-- On SEMICOLON shift to state 1
-- On list(SEMICOLON) shift to state 2
## Reductions:
-- On VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF
--   reduce production list(SEMICOLON) ->

State 2:
## Known stack suffix:
## SEMICOLON list(SEMICOLON)
## LR(1) items:
list(SEMICOLON) -> SEMICOLON list(SEMICOLON) . [ VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF ]
## Transitions:
## Reductions:
-- On VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF
--   reduce production list(SEMICOLON) -> SEMICOLON list(SEMICOLON)

State 3:
## Known stack suffix:
## list(SEMICOLON)
## LR(1) items:
file -> list(SEMICOLON) . list(__anonymous_0) EOF [ # ]
## Transitions:
-- On FUN shift to state 4
-- On list(__anonymous_0) shift to state 145
-- On decl shift to state 147
## Reductions:
-- On EOF
--   reduce production list(__anonymous_0) ->

State 4:
## Known stack suffix:
## FUN
## LR(1) items:
decl -> FUN . IDENT funbody [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
decl -> FUN IDENT . funbody [ SEMICOLON ]
## Transitions:
-- On LPAR shift to state 6
-- On funbody shift to state 144
## Reductions:

State 6:
## Known stack suffix:
## LPAR
## LR(1) items:
funbody -> LPAR . loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On IDENT shift to state 7
-- On separated_nonempty_list(COMMA,param) shift to state 38
-- On param shift to state 39
-- On loption(separated_nonempty_list(COMMA,param)) shift to state 42
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param)) ->

State 7:
## Known stack suffix:
## IDENT
## LR(1) items:
param -> IDENT . COLON kokatype [ RPAR COMMA ]
## Transitions:
-- On COLON shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
param -> IDENT COLON . kokatype [ RPAR COMMA ]
## Transitions:
-- On LPAR shift to state 9
-- On IDENT shift to state 11
-- On kokatype shift to state 37
-- On atype shift to state 17
## Reductions:

State 9:
## Known stack suffix:
## LPAR
## LR(1) items:
atype -> LPAR . kokatype RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
atype -> LPAR . RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
kokatype -> LPAR . list(__anonymous_2) ARROW result [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On RPAR shift to state 10
-- On LPAR shift to state 9
-- On IDENT shift to state 11
-- On COMMA shift to state 29
-- On list(__anonymous_2) shift to state 32
-- On kokatype shift to state 35
-- On atype shift to state 17
## Reductions:
-- On ARROW
--   reduce production list(__anonymous_2) ->

State 10:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
atype -> LPAR RPAR . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production atype -> LPAR RPAR

State 11:
## Known stack suffix:
## IDENT
## LR(1) items:
atype -> IDENT . option(__anonymous_3) [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LPAR shift to state 12
-- On option(__anonymous_3) shift to state 28
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production option(__anonymous_3) ->
** Conflict on LPAR

State 12:
## Known stack suffix:
## LPAR
## LR(1) items:
option(__anonymous_3) -> LPAR . LHOOK kokatype RHOOK RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LHOOK shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## LPAR LHOOK
## LR(1) items:
option(__anonymous_3) -> LPAR LHOOK . kokatype RHOOK RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LPAR shift to state 9
-- On IDENT shift to state 11
-- On kokatype shift to state 14
-- On atype shift to state 17
## Reductions:

State 14:
## Known stack suffix:
## LPAR LHOOK kokatype
## LR(1) items:
option(__anonymous_3) -> LPAR LHOOK kokatype . RHOOK RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On RHOOK shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## LPAR LHOOK kokatype RHOOK
## LR(1) items:
option(__anonymous_3) -> LPAR LHOOK kokatype RHOOK . RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On RPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LPAR LHOOK kokatype RHOOK RPAR
## LR(1) items:
option(__anonymous_3) -> LPAR LHOOK kokatype RHOOK RPAR . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production option(__anonymous_3) -> LPAR LHOOK kokatype RHOOK RPAR

State 17:
## Known stack suffix:
## atype
## LR(1) items:
kokatype -> atype . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
kokatype -> atype . ARROW result [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On ARROW shift to state 18
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production kokatype -> atype
** Conflict on ARROW

State 18:
## Known stack suffix:
## atype ARROW
## LR(1) items:
kokatype -> atype ARROW . result [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LPAR shift to state 9
-- On LHOOK shift to state 19
-- On IDENT shift to state 11
-- On result shift to state 26
-- On kokatype shift to state 27
-- On atype shift to state 17
## Reductions:

State 19:
## Known stack suffix:
## LHOOK
## LR(1) items:
result -> LHOOK . list(__anonymous_1) RHOOK kokatype [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On COMMA shift to state 20
-- On list(__anonymous_1) shift to state 23
## Reductions:
-- On RHOOK
--   reduce production list(__anonymous_1) ->

State 20:
## Known stack suffix:
## COMMA
## LR(1) items:
list(__anonymous_1) -> COMMA . IDENT list(__anonymous_1) [ RHOOK ]
## Transitions:
-- On IDENT shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## COMMA IDENT
## LR(1) items:
list(__anonymous_1) -> COMMA IDENT . list(__anonymous_1) [ RHOOK ]
## Transitions:
-- On COMMA shift to state 20
-- On list(__anonymous_1) shift to state 22
## Reductions:
-- On RHOOK
--   reduce production list(__anonymous_1) ->

State 22:
## Known stack suffix:
## COMMA IDENT list(__anonymous_1)
## LR(1) items:
list(__anonymous_1) -> COMMA IDENT list(__anonymous_1) . [ RHOOK ]
## Transitions:
## Reductions:
-- On RHOOK
--   reduce production list(__anonymous_1) -> COMMA IDENT list(__anonymous_1)

State 23:
## Known stack suffix:
## LHOOK list(__anonymous_1)
## LR(1) items:
result -> LHOOK list(__anonymous_1) . RHOOK kokatype [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On RHOOK shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LHOOK list(__anonymous_1) RHOOK
## LR(1) items:
result -> LHOOK list(__anonymous_1) RHOOK . kokatype [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LPAR shift to state 9
-- On IDENT shift to state 11
-- On kokatype shift to state 25
-- On atype shift to state 17
## Reductions:

State 25:
## Known stack suffix:
## LHOOK list(__anonymous_1) RHOOK kokatype
## LR(1) items:
result -> LHOOK list(__anonymous_1) RHOOK kokatype . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production result -> LHOOK list(__anonymous_1) RHOOK kokatype

State 26:
## Known stack suffix:
## atype ARROW result
## LR(1) items:
kokatype -> atype ARROW result . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production kokatype -> atype ARROW result

State 27:
## Known stack suffix:
## kokatype
## LR(1) items:
result -> kokatype . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production result -> kokatype

State 28:
## Known stack suffix:
## IDENT option(__anonymous_3)
## LR(1) items:
atype -> IDENT option(__anonymous_3) . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production atype -> IDENT option(__anonymous_3)

State 29:
## Known stack suffix:
## COMMA
## LR(1) items:
list(__anonymous_2) -> COMMA . kokatype list(__anonymous_2) [ ARROW ]
## Transitions:
-- On LPAR shift to state 9
-- On IDENT shift to state 11
-- On kokatype shift to state 30
-- On atype shift to state 17
## Reductions:

State 30:
## Known stack suffix:
## COMMA kokatype
## LR(1) items:
list(__anonymous_2) -> COMMA kokatype . list(__anonymous_2) [ ARROW ]
## Transitions:
-- On COMMA shift to state 29
-- On list(__anonymous_2) shift to state 31
## Reductions:
-- On ARROW
--   reduce production list(__anonymous_2) ->

State 31:
## Known stack suffix:
## COMMA kokatype list(__anonymous_2)
## LR(1) items:
list(__anonymous_2) -> COMMA kokatype list(__anonymous_2) . [ ARROW ]
## Transitions:
## Reductions:
-- On ARROW
--   reduce production list(__anonymous_2) -> COMMA kokatype list(__anonymous_2)

State 32:
## Known stack suffix:
## LPAR list(__anonymous_2)
## LR(1) items:
kokatype -> LPAR list(__anonymous_2) . ARROW result [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On ARROW shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## LPAR list(__anonymous_2) ARROW
## LR(1) items:
kokatype -> LPAR list(__anonymous_2) ARROW . result [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On LPAR shift to state 9
-- On LHOOK shift to state 19
-- On IDENT shift to state 11
-- On result shift to state 34
-- On kokatype shift to state 27
-- On atype shift to state 17
## Reductions:

State 34:
## Known stack suffix:
## LPAR list(__anonymous_2) ARROW result
## LR(1) items:
kokatype -> LPAR list(__anonymous_2) ARROW result . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production kokatype -> LPAR list(__anonymous_2) ARROW result

State 35:
## Known stack suffix:
## LPAR kokatype
## LR(1) items:
atype -> LPAR kokatype . RPAR [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
-- On RPAR shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LPAR kokatype RPAR
## LR(1) items:
atype -> LPAR kokatype RPAR . [ TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RPAR RHOOK RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM COMMA ARROW
--   reduce production atype -> LPAR kokatype RPAR

State 37:
## Known stack suffix:
## IDENT COLON kokatype
## LR(1) items:
param -> IDENT COLON kokatype . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production param -> IDENT COLON kokatype

State 38:
## Known stack suffix:
## separated_nonempty_list(COMMA,param)
## LR(1) items:
loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,param)) -> separated_nonempty_list(COMMA,param)

State 39:
## Known stack suffix:
## param
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param . [ RPAR ]
separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAR ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param) -> param

State 40:
## Known stack suffix:
## param COMMA
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAR ]
## Transitions:
-- On IDENT shift to state 7
-- On separated_nonempty_list(COMMA,param) shift to state 41
-- On param shift to state 39
## Reductions:

State 41:
## Known stack suffix:
## param COMMA separated_nonempty_list(COMMA,param)
## LR(1) items:
separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param) . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production separated_nonempty_list(COMMA,param) -> param COMMA separated_nonempty_list(COMMA,param)

State 42:
## Known stack suffix:
## LPAR loption(separated_nonempty_list(COMMA,param))
## LR(1) items:
funbody -> LPAR loption(separated_nonempty_list(COMMA,param)) . RPAR option(annot) expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On RPAR shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAR loption(separated_nonempty_list(COMMA,param)) RPAR
## LR(1) items:
funbody -> LPAR loption(separated_nonempty_list(COMMA,param)) RPAR . option(annot) expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On COLON shift to state 44
-- On option(annot) shift to state 46
-- On annot shift to state 143
## Reductions:
-- On TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM
--   reduce production option(annot) ->

State 44:
## Known stack suffix:
## COLON
## LR(1) items:
annot -> COLON . result [ TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM ]
## Transitions:
-- On LPAR shift to state 9
-- On LHOOK shift to state 19
-- On IDENT shift to state 11
-- On result shift to state 45
-- On kokatype shift to state 27
-- On atype shift to state 17
## Reductions:

State 45:
## Known stack suffix:
## COLON result
## LR(1) items:
annot -> COLON result . [ TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM
--   reduce production annot -> COLON result

State 46:
## Known stack suffix:
## LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot)
## LR(1) items:
funbody -> LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) . expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 142
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 47:
## Known stack suffix:
## TRUE
## LR(1) items:
atom -> TRUE . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> TRUE

State 48:
## Known stack suffix:
## TILD
## LR(1) items:
bexpr -> TILD . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 141
-- On atom shift to state 67
## Reductions:

State 49:
## Known stack suffix:
## STRING
## LR(1) items:
atom -> STRING . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> STRING

State 50:
## Known stack suffix:
## RETURN
## LR(1) items:
bexpr -> RETURN . expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 140
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 51:
## Known stack suffix:
## LSPAR
## LR(1) items:
atom -> LSPAR . loption(separated_nonempty_list(COMMA,expr)) RSPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On separated_nonempty_list(COMMA,expr) shift to state 69
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 138
-- On expr shift to state 72
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:
-- On RSPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 52:
## Known stack suffix:
## LPAR
## LR(1) items:
atom -> LPAR . RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
atom -> LPAR . expr RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RPAR shift to state 53
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 136
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 53:
## Known stack suffix:
## LPAR RPAR
## LR(1) items:
atom -> LPAR RPAR . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> LPAR RPAR

State 54:
## Known stack suffix:
## LBRAC
## LR(1) items:
block -> LBRAC . list(SEMICOLON) list(__anonymous_5) RBRAC [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On SEMICOLON shift to state 1
-- On list(SEMICOLON) shift to state 55
## Reductions:
-- On VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FN FALSE EXCLAM
--   reduce production list(SEMICOLON) ->

State 55:
## Known stack suffix:
## LBRAC list(SEMICOLON)
## LR(1) items:
block -> LBRAC list(SEMICOLON) . list(__anonymous_5) RBRAC [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On VAR shift to state 56
-- On VAL shift to state 124
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On stmt shift to state 128
-- On list(__anonymous_5) shift to state 134
-- On bexpr shift to state 133
-- On atom shift to state 67
## Reductions:
-- On RBRAC
--   reduce production list(__anonymous_5) ->

State 56:
## Known stack suffix:
## VAR
## LR(1) items:
stmt -> VAR . IDENT ASSIGN expr [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## VAR IDENT
## LR(1) items:
stmt -> VAR IDENT . ASSIGN expr [ SEMICOLON ]
## Transitions:
-- On ASSIGN shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## VAR IDENT ASSIGN
## LR(1) items:
stmt -> VAR IDENT ASSIGN . expr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 123
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 59:
## Known stack suffix:
## INT
## LR(1) items:
atom -> INT . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> INT

State 60:
## Known stack suffix:
## IF
## LR(1) items:
bexpr -> IF . bexpr THEN expr list(__anonymous_4) ELSE expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> IF . bexpr RETURN expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 110
-- On atom shift to state 67
## Reductions:

State 61:
## Known stack suffix:
## IDENT
## LR(1) items:
atom -> IDENT . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> IDENT

State 62:
## Known stack suffix:
## FN
## LR(1) items:
bexpr -> FN . funbody [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On LPAR shift to state 6
-- On funbody shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## FN funbody
## LR(1) items:
bexpr -> FN funbody . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> FN funbody

State 64:
## Known stack suffix:
## FALSE
## LR(1) items:
atom -> FALSE . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> FALSE

State 65:
## Known stack suffix:
## EXCLAM
## LR(1) items:
bexpr -> EXCLAM . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 66
-- On atom shift to state 67
## Reductions:

State 66:
## Known stack suffix:
## EXCLAM bexpr
## LR(1) items:
bexpr -> EXCLAM bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> EXCLAM bexpr

State 67:
## Known stack suffix:
## atom
## LR(1) items:
atom -> atom . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
atom -> atom . DOT IDENT [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
atom -> atom . FN funbody [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
atom -> atom . block [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> atom . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On LPAR shift to state 68
-- On LBRAC shift to state 54
-- On FN shift to state 105
-- On DOT shift to state 107
-- On block shift to state 109
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> atom
** Conflict on LPAR LBRAC FN DOT

State 68:
## Known stack suffix:
## atom LPAR
## LR(1) items:
atom -> atom LPAR . loption(separated_nonempty_list(COMMA,expr)) RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On separated_nonempty_list(COMMA,expr) shift to state 69
-- On loption(separated_nonempty_list(COMMA,expr)) shift to state 70
-- On expr shift to state 72
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:
-- On RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) ->

State 69:
## Known stack suffix:
## separated_nonempty_list(COMMA,expr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) . [ RSPAR RPAR ]
## Transitions:
## Reductions:
-- On RSPAR RPAR
--   reduce production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)

State 70:
## Known stack suffix:
## atom LPAR loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
atom -> atom LPAR loption(separated_nonempty_list(COMMA,expr)) . RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On RPAR shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## atom LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR
## LR(1) items:
atom -> atom LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> atom LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR

State 72:
## Known stack suffix:
## expr
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr . [ RSPAR RPAR ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSPAR RPAR ]
## Transitions:
-- On COMMA shift to state 73
## Reductions:
-- On RSPAR RPAR
--   reduce production separated_nonempty_list(COMMA,expr) -> expr

State 73:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RSPAR RPAR ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On separated_nonempty_list(COMMA,expr) shift to state 74
-- On expr shift to state 72
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 74:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RSPAR RPAR ]
## Transitions:
## Reductions:
-- On RSPAR RPAR
--   reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 75:
## Known stack suffix:
## block
## LR(1) items:
expr -> block . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production expr -> block

State 76:
## Known stack suffix:
## bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
expr -> bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On OR shift to state 85
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
-- On AND shift to state 103
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production expr -> bexpr
** Conflict on PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND

State 77:
## Known stack suffix:
## bexpr PLUS
## LR(1) items:
bexpr -> bexpr PLUS . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 78
-- On atom shift to state 67
## Reductions:

State 78:
## Known stack suffix:
## bexpr PLUS bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr PLUS bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On DIV shift to state 83
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT CONCAT COMMA AND
--   reduce production bexpr -> bexpr PLUS bexpr

State 79:
## Known stack suffix:
## bexpr MUL
## LR(1) items:
bexpr -> bexpr MUL . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 80
-- On atom shift to state 67
## Reductions:

State 80:
## Known stack suffix:
## bexpr MUL bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr MUL bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> bexpr MUL bexpr

State 81:
## Known stack suffix:
## bexpr MOD
## LR(1) items:
bexpr -> bexpr MOD . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 82
-- On atom shift to state 67
## Reductions:

State 82:
## Known stack suffix:
## bexpr MOD bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr MOD bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> bexpr MOD bexpr

State 83:
## Known stack suffix:
## bexpr DIV
## LR(1) items:
bexpr -> bexpr DIV . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 84
-- On atom shift to state 67
## Reductions:

State 84:
## Known stack suffix:
## bexpr DIV bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr DIV bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> bexpr DIV bexpr

State 85:
## Known stack suffix:
## bexpr OR
## LR(1) items:
bexpr -> bexpr OR . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 86
-- On atom shift to state 67
## Reductions:

State 86:
## Known stack suffix:
## bexpr OR bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr OR bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
-- On AND shift to state 103
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA
--   reduce production bexpr -> bexpr OR bexpr

State 87:
## Known stack suffix:
## bexpr NEQ
## LR(1) items:
bexpr -> bexpr NEQ . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 88
-- On atom shift to state 67
## Reductions:

State 88:
## Known stack suffix:
## bexpr NEQ bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr NEQ bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr NEQ bexpr

State 89:
## Known stack suffix:
## bexpr MINUS
## LR(1) items:
bexpr -> bexpr MINUS . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 90
-- On atom shift to state 67
## Reductions:

State 90:
## Known stack suffix:
## bexpr MINUS bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr MINUS bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On DIV shift to state 83
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT CONCAT COMMA AND
--   reduce production bexpr -> bexpr MINUS bexpr

State 91:
## Known stack suffix:
## bexpr CONCAT
## LR(1) items:
bexpr -> bexpr CONCAT . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 92
-- On atom shift to state 67
## Reductions:

State 92:
## Known stack suffix:
## bexpr CONCAT bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr CONCAT bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On DIV shift to state 83
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT CONCAT COMMA AND
--   reduce production bexpr -> bexpr CONCAT bexpr

State 93:
## Known stack suffix:
## bexpr LTE
## LR(1) items:
bexpr -> bexpr LTE . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 94
-- On atom shift to state 67
## Reductions:

State 94:
## Known stack suffix:
## bexpr LTE bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr LTE bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr LTE bexpr

State 95:
## Known stack suffix:
## bexpr LT
## LR(1) items:
bexpr -> bexpr LT . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 96
-- On atom shift to state 67
## Reductions:

State 96:
## Known stack suffix:
## bexpr LT bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr LT bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr LT bexpr

State 97:
## Known stack suffix:
## bexpr GTE
## LR(1) items:
bexpr -> bexpr GTE . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 98
-- On atom shift to state 67
## Reductions:

State 98:
## Known stack suffix:
## bexpr GTE bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr GTE bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr GTE bexpr

State 99:
## Known stack suffix:
## bexpr GT
## LR(1) items:
bexpr -> bexpr GT . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 100
-- On atom shift to state 67
## Reductions:

State 100:
## Known stack suffix:
## bexpr GT bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr GT bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr GT bexpr

State 101:
## Known stack suffix:
## bexpr EQ
## LR(1) items:
bexpr -> bexpr EQ . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 102
-- On atom shift to state 67
## Reductions:

State 102:
## Known stack suffix:
## bexpr EQ bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr EQ bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr EQ bexpr

State 103:
## Known stack suffix:
## bexpr AND
## LR(1) items:
bexpr -> bexpr AND . bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 104
-- On atom shift to state 67
## Reductions:

State 104:
## Known stack suffix:
## bexpr AND bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr AND bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On PLUS shift to state 77
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN OR LPAR LBRAC FN ELSE ELIF DOT COMMA AND
--   reduce production bexpr -> bexpr AND bexpr

State 105:
## Known stack suffix:
## atom FN
## LR(1) items:
atom -> atom FN . funbody [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On LPAR shift to state 6
-- On funbody shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## atom FN funbody
## LR(1) items:
atom -> atom FN funbody . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> atom FN funbody

State 107:
## Known stack suffix:
## atom DOT
## LR(1) items:
atom -> atom DOT . IDENT [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On IDENT shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## atom DOT IDENT
## LR(1) items:
atom -> atom DOT IDENT . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> atom DOT IDENT

State 109:
## Known stack suffix:
## atom block
## LR(1) items:
atom -> atom block . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> atom block

State 110:
## Known stack suffix:
## IF bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . NEQ bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LT bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LTE bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GT bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GTE bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . PLUS bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MINUS bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MUL bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . DIV bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MOD bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . AND bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . OR bexpr [ THEN RETURN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> IF bexpr . THEN expr list(__anonymous_4) ELSE expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> IF bexpr . RETURN expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On THEN shift to state 111
-- On RETURN shift to state 121
-- On PLUS shift to state 77
-- On OR shift to state 85
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
-- On AND shift to state 103
## Reductions:

State 111:
## Known stack suffix:
## IF bexpr THEN
## LR(1) items:
bexpr -> IF bexpr THEN . expr list(__anonymous_4) ELSE expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 112
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 112:
## Known stack suffix:
## IF bexpr THEN expr
## LR(1) items:
bexpr -> IF bexpr THEN expr . list(__anonymous_4) ELSE expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On ELIF shift to state 113
-- On list(__anonymous_4) shift to state 118
## Reductions:
-- On ELSE
--   reduce production list(__anonymous_4) ->

State 113:
## Known stack suffix:
## ELIF
## LR(1) items:
list(__anonymous_4) -> ELIF . bexpr THEN expr list(__anonymous_4) [ ELSE ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On bexpr shift to state 114
-- On atom shift to state 67
## Reductions:

State 114:
## Known stack suffix:
## ELIF bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . NEQ bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LT bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LTE bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GT bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GTE bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . PLUS bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MINUS bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MUL bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . DIV bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MOD bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . AND bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . OR bexpr [ THEN PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
list(__anonymous_4) -> ELIF bexpr . THEN expr list(__anonymous_4) [ ELSE ]
## Transitions:
-- On THEN shift to state 115
-- On PLUS shift to state 77
-- On OR shift to state 85
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
-- On AND shift to state 103
## Reductions:

State 115:
## Known stack suffix:
## ELIF bexpr THEN
## LR(1) items:
list(__anonymous_4) -> ELIF bexpr THEN . expr list(__anonymous_4) [ ELSE ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 116
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 116:
## Known stack suffix:
## ELIF bexpr THEN expr
## LR(1) items:
list(__anonymous_4) -> ELIF bexpr THEN expr . list(__anonymous_4) [ ELSE ]
## Transitions:
-- On ELIF shift to state 113
-- On list(__anonymous_4) shift to state 117
## Reductions:
-- On ELSE
--   reduce production list(__anonymous_4) ->

State 117:
## Known stack suffix:
## ELIF bexpr THEN expr list(__anonymous_4)
## LR(1) items:
list(__anonymous_4) -> ELIF bexpr THEN expr list(__anonymous_4) . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE
--   reduce production list(__anonymous_4) -> ELIF bexpr THEN expr list(__anonymous_4)

State 118:
## Known stack suffix:
## IF bexpr THEN expr list(__anonymous_4)
## LR(1) items:
bexpr -> IF bexpr THEN expr list(__anonymous_4) . ELSE expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On ELSE shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## IF bexpr THEN expr list(__anonymous_4) ELSE
## LR(1) items:
bexpr -> IF bexpr THEN expr list(__anonymous_4) ELSE . expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 120
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 120:
## Known stack suffix:
## IF bexpr THEN expr list(__anonymous_4) ELSE expr
## LR(1) items:
bexpr -> IF bexpr THEN expr list(__anonymous_4) ELSE expr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> IF bexpr THEN expr list(__anonymous_4) ELSE expr

State 121:
## Known stack suffix:
## IF bexpr RETURN
## LR(1) items:
bexpr -> IF bexpr RETURN . expr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 122
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 122:
## Known stack suffix:
## IF bexpr RETURN expr
## LR(1) items:
bexpr -> IF bexpr RETURN expr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> IF bexpr RETURN expr

State 123:
## Known stack suffix:
## VAR IDENT ASSIGN expr
## LR(1) items:
stmt -> VAR IDENT ASSIGN expr . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stmt -> VAR IDENT ASSIGN expr

State 124:
## Known stack suffix:
## VAL
## LR(1) items:
stmt -> VAL . IDENT DEF expr [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## VAL IDENT
## LR(1) items:
stmt -> VAL IDENT . DEF expr [ SEMICOLON ]
## Transitions:
-- On DEF shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## VAL IDENT DEF
## LR(1) items:
stmt -> VAL IDENT DEF . expr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On LBRAC shift to state 54
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On expr shift to state 127
-- On block shift to state 75
-- On bexpr shift to state 76
-- On atom shift to state 67
## Reductions:

State 127:
## Known stack suffix:
## VAL IDENT DEF expr
## LR(1) items:
stmt -> VAL IDENT DEF expr . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production stmt -> VAL IDENT DEF expr

State 128:
## Known stack suffix:
## stmt
## LR(1) items:
list(__anonymous_5) -> stmt . nonempty_list(SEMICOLON) list(__anonymous_5) [ RBRAC ]
## Transitions:
-- On SEMICOLON shift to state 129
-- On nonempty_list(SEMICOLON) shift to state 131
## Reductions:

State 129:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
nonempty_list(SEMICOLON) -> SEMICOLON . [ VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF ]
nonempty_list(SEMICOLON) -> SEMICOLON . nonempty_list(SEMICOLON) [ VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF ]
## Transitions:
-- On SEMICOLON shift to state 129
-- On nonempty_list(SEMICOLON) shift to state 130
## Reductions:
-- On VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF
--   reduce production nonempty_list(SEMICOLON) -> SEMICOLON

State 130:
## Known stack suffix:
## SEMICOLON nonempty_list(SEMICOLON)
## LR(1) items:
nonempty_list(SEMICOLON) -> SEMICOLON nonempty_list(SEMICOLON) . [ VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF ]
## Transitions:
## Reductions:
-- On VAR VAL TRUE TILD STRING RETURN RBRAC LSPAR LPAR INT IF IDENT FUN FN FALSE EXCLAM EOF
--   reduce production nonempty_list(SEMICOLON) -> SEMICOLON nonempty_list(SEMICOLON)

State 131:
## Known stack suffix:
## stmt nonempty_list(SEMICOLON)
## LR(1) items:
list(__anonymous_5) -> stmt nonempty_list(SEMICOLON) . list(__anonymous_5) [ RBRAC ]
## Transitions:
-- On VAR shift to state 56
-- On VAL shift to state 124
-- On TRUE shift to state 47
-- On TILD shift to state 48
-- On STRING shift to state 49
-- On RETURN shift to state 50
-- On LSPAR shift to state 51
-- On LPAR shift to state 52
-- On INT shift to state 59
-- On IF shift to state 60
-- On IDENT shift to state 61
-- On FN shift to state 62
-- On FALSE shift to state 64
-- On EXCLAM shift to state 65
-- On stmt shift to state 128
-- On list(__anonymous_5) shift to state 132
-- On bexpr shift to state 133
-- On atom shift to state 67
## Reductions:
-- On RBRAC
--   reduce production list(__anonymous_5) ->

State 132:
## Known stack suffix:
## stmt nonempty_list(SEMICOLON) list(__anonymous_5)
## LR(1) items:
list(__anonymous_5) -> stmt nonempty_list(SEMICOLON) list(__anonymous_5) . [ RBRAC ]
## Transitions:
## Reductions:
-- On RBRAC
--   reduce production list(__anonymous_5) -> stmt nonempty_list(SEMICOLON) list(__anonymous_5)

State 133:
## Known stack suffix:
## bexpr
## LR(1) items:
bexpr -> bexpr . EQ bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . NEQ bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LT bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . LTE bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GT bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . GTE bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . PLUS bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MINUS bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MUL bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . DIV bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . MOD bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . CONCAT bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . AND bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
bexpr -> bexpr . OR bexpr [ SEMICOLON PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND ]
stmt -> bexpr . [ SEMICOLON ]
## Transitions:
-- On PLUS shift to state 77
-- On OR shift to state 85
-- On NEQ shift to state 87
-- On MUL shift to state 79
-- On MOD shift to state 81
-- On MINUS shift to state 89
-- On LTE shift to state 93
-- On LT shift to state 95
-- On GTE shift to state 97
-- On GT shift to state 99
-- On EQ shift to state 101
-- On DIV shift to state 83
-- On CONCAT shift to state 91
-- On AND shift to state 103
## Reductions:
-- On SEMICOLON
--   reduce production stmt -> bexpr

State 134:
## Known stack suffix:
## LBRAC list(SEMICOLON) list(__anonymous_5)
## LR(1) items:
block -> LBRAC list(SEMICOLON) list(__anonymous_5) . RBRAC [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On RBRAC shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## LBRAC list(SEMICOLON) list(__anonymous_5) RBRAC
## LR(1) items:
block -> LBRAC list(SEMICOLON) list(__anonymous_5) RBRAC . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production block -> LBRAC list(SEMICOLON) list(__anonymous_5) RBRAC

State 136:
## Known stack suffix:
## LPAR expr
## LR(1) items:
atom -> LPAR expr . RPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On RPAR shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## LPAR expr RPAR
## LR(1) items:
atom -> LPAR expr RPAR . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> LPAR expr RPAR

State 138:
## Known stack suffix:
## LSPAR loption(separated_nonempty_list(COMMA,expr))
## LR(1) items:
atom -> LSPAR loption(separated_nonempty_list(COMMA,expr)) . RSPAR [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
-- On RSPAR shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## LSPAR loption(separated_nonempty_list(COMMA,expr)) RSPAR
## LR(1) items:
atom -> LSPAR loption(separated_nonempty_list(COMMA,expr)) RSPAR . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production atom -> LSPAR loption(separated_nonempty_list(COMMA,expr)) RSPAR

State 140:
## Known stack suffix:
## RETURN expr
## LR(1) items:
bexpr -> RETURN expr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> RETURN expr

State 141:
## Known stack suffix:
## TILD bexpr
## LR(1) items:
bexpr -> TILD bexpr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . EQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . NEQ bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . LTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . GTE bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . PLUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MINUS bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MUL bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . DIV bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . MOD bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . CONCAT bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . AND bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
bexpr -> bexpr . OR bexpr [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production bexpr -> TILD bexpr

State 142:
## Known stack suffix:
## LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr
## LR(1) items:
funbody -> LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr . [ THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND ]
## Transitions:
## Reductions:
-- On THEN SEMICOLON RSPAR RPAR RETURN PLUS OR NEQ MUL MOD MINUS LTE LT LPAR LBRAC GTE GT FN EQ ELSE ELIF DOT DIV CONCAT COMMA AND
--   reduce production funbody -> LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr

State 143:
## Known stack suffix:
## annot
## LR(1) items:
option(annot) -> annot . [ TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM ]
## Transitions:
## Reductions:
-- On TRUE TILD STRING RETURN LSPAR LPAR LBRAC INT IF IDENT FN FALSE EXCLAM
--   reduce production option(annot) -> annot

State 144:
## Known stack suffix:
## FUN IDENT funbody
## LR(1) items:
decl -> FUN IDENT funbody . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production decl -> FUN IDENT funbody

State 145:
## Known stack suffix:
## list(SEMICOLON) list(__anonymous_0)
## LR(1) items:
file -> list(SEMICOLON) list(__anonymous_0) . EOF [ # ]
## Transitions:
-- On EOF shift to state 146
## Reductions:

State 146:
## Known stack suffix:
## list(SEMICOLON) list(__anonymous_0) EOF
## LR(1) items:
file -> list(SEMICOLON) list(__anonymous_0) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(SEMICOLON) list(__anonymous_0) EOF

State 147:
## Known stack suffix:
## decl
## LR(1) items:
list(__anonymous_0) -> decl . nonempty_list(SEMICOLON) list(__anonymous_0) [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 129
-- On nonempty_list(SEMICOLON) shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## decl nonempty_list(SEMICOLON)
## LR(1) items:
list(__anonymous_0) -> decl nonempty_list(SEMICOLON) . list(__anonymous_0) [ EOF ]
## Transitions:
-- On FUN shift to state 4
-- On list(__anonymous_0) shift to state 149
-- On decl shift to state 147
## Reductions:
-- On EOF
--   reduce production list(__anonymous_0) ->

State 149:
## Known stack suffix:
## decl nonempty_list(SEMICOLON) list(__anonymous_0)
## LR(1) items:
list(__anonymous_0) -> decl nonempty_list(SEMICOLON) list(__anonymous_0) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(__anonymous_0) -> decl nonempty_list(SEMICOLON) list(__anonymous_0)

State 150:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

