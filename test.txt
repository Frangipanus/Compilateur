#!/bin/bash

shopt -s nullglob

# script de test pour le projet de compilation

option=$1
compilo=$2
score=0
max=0
verbose=0


echo "Test de $2"

echo

KOKA="koka --console=raw -v0"

# tous les tests passent avec Koka
test_koka() {
for f in typing/bad/*.koka; do
    # if test $f == typing/bad/testfile-main-1.koka; then continue; fi
    if $KOKA -c $f > /dev/null 2>&1 ; then
      echo "succès de koka sur $f"; exit 1
    fi
done
for f in typing/good/*.koka; do
    $KOKA $f > /dev/null ||
     (echo "echec de koka sur $f"; exit 1)
done
for f in exec/*.koka; do
    $KOKA -e $f > /dev/null ||
     (echo "echec de koka sur $f"; exit 1)
done
for f in exec-fail/*.koka; do
    $KOKA -c $f > /dev/null ||
        (echo "echec de koka sur $f"; exit 1)
    if $KOKA -e $f > /dev/null 2>&1 ; then
      echo "succès de koka sur $f"; exit 1
    fi
done
}

compile () {
if [[ $verbose != 0 ]]; then
  echo Compile $1 $2
  $compilo $1 $2;
else
  $compilo $1 $2 > /dev/null 2>&1;
fi;
}


##############################################################################
# partie 1 : tests d'analyse syntaxique
##############################################################################

partie1 () {

score=0
max=0

echo "Partie 1"

# les mauvais
echo -n "mauvais "
for f in syntax/bad/*.koka; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"0")
	echo
	echo "ECHEC sur "$f" (devrait échouer)";;
	"1") score=`expr $score + 1`;;
	*)
	echo
	echo "ECHEC sur "$f" (pour une mauvaise raison)";;
    esac
done
echo

# les bons
echo -n "bons "
for f in syntax/good/*.koka typing/bad/*.koka typing/good/*.koka exec/*.koka exec-fail/*.koka; do
    echo -n ".";
    max=`expr $max + 1`;
    compile --parse-only $f;
    case $? in
	"1")
	echo
	echo "ECHEC sur "$f" (devrait reussir)";;
	"0") score=`expr $score + 1`;;
	*)
	echo
	echo "ECHEC sur "$f" (pour une mauvaise raison)";;
    esac
done
echo

percent=`expr 100 \* $score / $max`;

echo -n "Parsing: $score/$max : $percent%"; }
