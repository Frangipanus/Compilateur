
** Conflict (shift/reduce) in state 94.
** Tokens involved: PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND
** The following explanations concentrate on token PLUS.
** This state is reached from file after reading:

list(SEMICOLON) FUN IDENT LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) RETURN bexpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
list(SEMICOLON) list(__anonymous_0) EOF 
                decl nonempty_list(SEMICOLON) list(__anonymous_0) 
                FUN IDENT funbody 
                          LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                                                                                                bexpr 
                                                                                                (?)

** In state 94, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

RETURN expr 
       bexpr 
       bexpr binop bexpr 
             . PLUS 

** In state 94, looking ahead at PLUS, reducing production
** expr -> bexpr
** is permitted because of the following sub-derivation:

bexpr binop bexpr // lookahead token appears because binop can begin with PLUS
RETURN expr // lookahead token is inherited
       bexpr . 

** Conflict (shift/reduce) in state 85.
** Tokens involved: LPAR LBRAC FN DOT
** The following explanations concentrate on token LPAR.
** This state is reached from file after reading:

list(SEMICOLON) FUN IDENT LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) atom FN LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) atom

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
list(SEMICOLON) list(__anonymous_0) EOF 
                decl nonempty_list(SEMICOLON) list(__anonymous_0) 
                FUN IDENT funbody 
                          LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                                                                                                bexpr 
                                                                                                atom 
                                                                                                (?)

** In state 85, looking ahead at LPAR, shifting is permitted
** because of the following sub-derivation:

atom FN funbody 
        LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                                                                              bexpr 
                                                                              atom 
                                                                              atom . LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR 

** In state 85, looking ahead at LPAR, reducing production
** bexpr -> atom
** is permitted because of the following sub-derivation:

atom LPAR loption(separated_nonempty_list(COMMA,expr)) RPAR // lookahead token appears
atom FN funbody // lookahead token is inherited
        LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr // lookahead token is inherited
                                                                              bexpr // lookahead token is inherited
                                                                              atom . 

** Conflict (shift/reduce) in state 70.
** Tokens involved: PLUS OR NEQ MUL MOD MINUS LTE LT GTE GT EQ DIV CONCAT AND
** The following explanations concentrate on token PLUS.
** This state is reached from file after reading:

list(SEMICOLON) FUN IDENT LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) bexpr binop bexpr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
list(SEMICOLON) list(__anonymous_0) EOF 
                decl nonempty_list(SEMICOLON) list(__anonymous_0) 
                FUN IDENT funbody 
                          LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                                                                                                bexpr 
                                                                                                (?)

** In state 70, looking ahead at PLUS, reducing production
** bexpr -> bexpr binop bexpr
** is permitted because of the following sub-derivation:

bexpr binop bexpr // lookahead token appears because binop can begin with PLUS
bexpr binop bexpr . 

** In state 70, looking ahead at PLUS, shifting is permitted
** because of the following sub-derivation:

bexpr binop bexpr 
            bexpr binop bexpr 
                  . PLUS 

** Conflict (shift/reduce) in state 17.
** Token involved: ARROW
** This state is reached from file after reading:

list(SEMICOLON) FUN IDENT LPAR IDENT COLON LPAR atype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
list(SEMICOLON) list(__anonymous_0) EOF 
                decl nonempty_list(SEMICOLON) list(__anonymous_0) 
                FUN IDENT funbody 
                          LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                               separated_nonempty_list(COMMA,param) 
                               param 
                               IDENT COLON kokatype 
                                           (?)

** In state 17, looking ahead at ARROW, reducing production
** kokatype -> atype
** is permitted because of the following sub-derivation:

LPAR loption(separated_nonempty_list(COMMA,kokatype)) ARROW result // lookahead token appears
     separated_nonempty_list(COMMA,kokatype) // lookahead token is inherited
     kokatype // lookahead token is inherited
     atype . 

** In state 17, looking ahead at ARROW, shifting is permitted
** because of the following sub-derivation:

atype 
LPAR kokatype RPAR 
     atype . ARROW result 

** Conflict (shift/reduce) in state 11.
** Token involved: LPAR
** This state is reached from file after reading:

list(SEMICOLON) FUN IDENT LPAR loption(separated_nonempty_list(COMMA,param)) RPAR COLON option(__anonymous_1) IDENT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

file 
list(SEMICOLON) list(__anonymous_0) EOF 
                decl nonempty_list(SEMICOLON) list(__anonymous_0) 
                FUN IDENT funbody 
                          (?)

** In state 11, looking ahead at LPAR, reducing production
** option(__anonymous_2) ->
** is permitted because of the following sub-derivation:

LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr // lookahead token appears because expr can begin with LPAR
                                                        annot // lookahead token is inherited
                                                        COLON result // lookahead token is inherited
                                                              option(__anonymous_1) kokatype // lookahead token is inherited
                                                                                    atype // lookahead token is inherited
                                                                                    IDENT option(__anonymous_2) // lookahead token is inherited
                                                                                          . 

** In state 11, looking ahead at LPAR, shifting is permitted
** because of the following sub-derivation:

LPAR loption(separated_nonempty_list(COMMA,param)) RPAR option(annot) expr 
                                                        annot 
                                                        COLON result 
                                                              option(__anonymous_1) kokatype 
                                                                                    atype 
                                                                                    IDENT option(__anonymous_2) 
                                                                                          . LPAR LHOOK kokatype RHOOK RPAR 
