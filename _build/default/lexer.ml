# 4 "lexer.mll"
 
  open Lexing
  open Parser
  
  exception Lexing_error of string

  let key_words = Hashtbl.create 11
  let () = Hashtbl.add key_words "if" IF
  let () = Hashtbl.add key_words "then" THEN
  let () = Hashtbl.add key_words "else" ELSE
  let () = Hashtbl.add key_words "elif" ELIF
  let () = Hashtbl.add key_words "fn" FN
  let () = Hashtbl.add key_words "fun" FUN
  let () = Hashtbl.add key_words "return" RETURN
  let () = Hashtbl.add key_words "val" VAL
  let () = Hashtbl.add key_words "var" VAR
  let () = Hashtbl.add key_words "True" TRUE
  let () = Hashtbl.add key_words "False" FALSE
  
  let fin_cont = [PLUS; MINUS; MUL; DIV; MOD; CONCAT ;LT ; LTE; GT ;GTE ;EQ; NEQ ;AND; OR ;LPAR; LBRAC; COMMA; ]
  let debut_cont = [PLUS; MINUS ;MUL; DIV; MOD; CONCAT; LT; LTE; GT; GTE; EQ; NEQ; AND; OR; LPAR; LBRAC; COMMA; RPAR; RBRAC ;ARROW ; DEF; DOT ;ASSIGN ; SEMICOLON ;THEN; ELSE; ELIF;]

  let level = ref (-1)
  let last = ref IF
  let indented = ref false



# 31 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\217\255\218\255\088\000\220\255\003\000\015\000\222\255\
    \223\255\225\255\226\255\230\255\012\000\232\255\235\255\236\255\
    \237\255\238\255\239\255\240\255\004\000\001\000\013\000\014\000\
    \015\000\016\000\250\255\030\000\045\000\047\000\254\255\255\255\
    \253\255\229\255\248\255\246\255\244\255\243\255\242\255\241\255\
    \227\255\051\000\192\000\020\001\027\000\254\255\004\000\169\000\
    \253\255\254\255\049\000\255\255\112\000\254\255\113\000";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\036\000\255\255\034\000\033\000\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\038\000\038\000\031\000\027\000\
    \010\000\008\000\255\255\004\000\003\000\006\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\036\000\036\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\002\000\255\255\000\000\255\255\000\000";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\045\000\000\000\255\255\048\000\
    \000\000\000\000\255\255\000\000\054\000\000\000\054\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\022\000\008\000\005\000\046\000\046\000\021\000\038\000\
    \019\000\018\000\026\000\028\000\013\000\027\000\010\000\029\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\012\000\011\000\025\000\023\000\024\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\040\000\037\000\036\000\035\000\034\000\007\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \032\000\030\000\041\000\015\000\033\000\014\000\031\000\003\000\
    \051\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\017\000\020\000\016\000\009\000\041\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\053\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\000\000\000\000\000\000\000\000\042\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\050\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\000\000\000\000\000\000\043\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\041\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \255\255\255\255\000\000\043\000\000\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\005\000\046\000\044\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\012\000\022\000\023\000\024\000\025\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \028\000\029\000\041\000\000\000\027\000\000\000\029\000\000\000\
    \050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\052\000\054\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\255\255\255\255\255\255\003\000\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\047\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\044\000\255\255\255\255\255\255\042\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\043\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\255\255\
    \052\000\054\000\255\255\043\000\255\255\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\047\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 44 "lexer.mll"
          ( comment lexbuf )
# 214 "lexer.ml"

  | 1 ->
# 45 "lexer.mll"
          ( comment2 lexbuf )
# 219 "lexer.ml"

  | 2 ->
# 46 "lexer.mll"
          ( CONCAT )
# 224 "lexer.ml"

  | 3 ->
# 47 "lexer.mll"
          ( PLUS )
# 229 "lexer.ml"

  | 4 ->
# 48 "lexer.mll"
          ( MINUS )
# 234 "lexer.ml"

  | 5 ->
# 49 "lexer.mll"
          ( MUL )
# 239 "lexer.ml"

  | 6 ->
# 50 "lexer.mll"
          ( DIV )
# 244 "lexer.ml"

  | 7 ->
# 51 "lexer.mll"
          ( LTE )
# 249 "lexer.ml"

  | 8 ->
# 52 "lexer.mll"
          ( LT )
# 254 "lexer.ml"

  | 9 ->
# 53 "lexer.mll"
          ( GTE )
# 259 "lexer.ml"

  | 10 ->
# 54 "lexer.mll"
          ( GT )
# 264 "lexer.ml"

  | 11 ->
# 55 "lexer.mll"
          ( EQ )
# 269 "lexer.ml"

  | 12 ->
# 56 "lexer.mll"
          ( NEQ )
# 274 "lexer.ml"

  | 13 ->
# 57 "lexer.mll"
          ( AND )
# 279 "lexer.ml"

  | 14 ->
# 58 "lexer.mll"
          ( OR )
# 284 "lexer.ml"

  | 15 ->
# 59 "lexer.mll"
          ( LPAR )
# 289 "lexer.ml"

  | 16 ->
# 60 "lexer.mll"
          ( RPAR )
# 294 "lexer.ml"

  | 17 ->
# 61 "lexer.mll"
          ( LBRAC )
# 299 "lexer.ml"

  | 18 ->
# 62 "lexer.mll"
          ( RBRAC )
# 304 "lexer.ml"

  | 19 ->
# 63 "lexer.mll"
          ( LSPAR )
# 309 "lexer.ml"

  | 20 ->
# 64 "lexer.mll"
          ( RSPAR )
# 314 "lexer.ml"

  | 21 ->
# 65 "lexer.mll"
          ( LHOOK )
# 319 "lexer.ml"

  | 22 ->
# 66 "lexer.mll"
          ( RHOOK )
# 324 "lexer.ml"

  | 23 ->
# 67 "lexer.mll"
          ( COMMA )
# 329 "lexer.ml"

  | 24 ->
# 68 "lexer.mll"
          ( COLON )
# 334 "lexer.ml"

  | 25 ->
# 69 "lexer.mll"
          ( SEMICOLON )
# 339 "lexer.ml"

  | 26 ->
# 70 "lexer.mll"
          ( ARROW )
# 344 "lexer.ml"

  | 27 ->
# 71 "lexer.mll"
          ( DEF )
# 349 "lexer.ml"

  | 28 ->
# 72 "lexer.mll"
          ( ASSIGN )
# 354 "lexer.ml"

  | 29 ->
# 73 "lexer.mll"
          ( DOT )
# 359 "lexer.ml"

  | 30 ->
# 74 "lexer.mll"
          ( TILD )
# 364 "lexer.ml"

  | 31 ->
# 75 "lexer.mll"
          ( EXCLAM )
# 369 "lexer.ml"

  | 32 ->
# 76 "lexer.mll"
          ( read_string lexbuf )
# 374 "lexer.ml"

  | 33 ->
let
# 77 "lexer.mll"
               s
# 380 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 77 "lexer.mll"
                 ( INT (int_of_string s) )
# 384 "lexer.ml"

  | 34 ->
let
# 78 "lexer.mll"
              s
# 390 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "lexer.mll"
                ( level := String.length s -1; token lexbuf )
# 394 "lexer.ml"

  | 35 ->
# 79 "lexer.mll"
        ( token lexbuf )
# 399 "lexer.ml"

  | 36 ->
let
# 80 "lexer.mll"
             id
# 405 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 80 "lexer.mll"
                ( try Hashtbl.find key_words id with Not_found -> IDENT id )
# 409 "lexer.ml"

  | 37 ->
# 81 "lexer.mll"
        ( EOF )
# 414 "lexer.ml"

  | 38 ->
let
# 82 "lexer.mll"
         c
# 420 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 82 "lexer.mll"
           ( raise (Lexing_error ("error read: "^(String.make 1 c))) )
# 424 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 44
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 85 "lexer.mll"
              s
# 437 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 85 "lexer.mll"
                ( let level1 = String.length s -1  in Printf.printf "My tab level is %d\n" level1; token lexbuf )
# 441 "lexer.ml"

  | 1 ->
# 86 "lexer.mll"
       ( comment lexbuf )
# 446 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment2 lexbuf =
   __ocaml_lex_comment2_rec lexbuf 47
and __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 89 "lexer.mll"
         ( token lexbuf )
# 458 "lexer.ml"

  | 1 ->
# 90 "lexer.mll"
         ( raise(Lexing_error ("commentaire non finit")) )
# 463 "lexer.ml"

  | 2 ->
# 91 "lexer.mll"
         ( comment2 lexbuf )
# 468 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state

and read_string lexbuf =
   __ocaml_lex_read_string_rec lexbuf 52
and __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 94 "lexer.mll"
              s
# 481 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 94 "lexer.mll"
                ( STRING s )
# 485 "lexer.ml"

  | 1 ->
# 95 "lexer.mll"
        ( token lexbuf )
# 490 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state

;;

