# 4 "lexer.mll"
 

  open Lexing
  open Parser
  
  exception Lexing_error of string

  let key_words = Hashtbl.create 11
  let () = Hashtbl.add key_words "if" IF
  let () = Hashtbl.add key_words "then" THEN
  let () = Hashtbl.add key_words "else" ELSE
  let () = Hashtbl.add key_words "elif" ELIF
  let () = Hashtbl.add key_words "fn" FN
  let () = Hashtbl.add key_words "fun" FUN
  let () = Hashtbl.add key_words "return" RETURN
  let () = Hashtbl.add key_words "val" VAL
  let () = Hashtbl.add key_words "var" VAR
  let () = Hashtbl.add key_words "True" TRUE
  let () = Hashtbl.add key_words "False" FALSE
  
  let fin_cont = [PLUS; MINUS; MUL; DIV; MOD; CONCAT ;LT ; LTE; GT ;GTE ;EQ; NEQ ;AND; OR ;LPAR; LBRAC; COMMA; ]
  let debut_cont = [PLUS; MINUS ;MUL; DIV; MOD; CONCAT; LT; LTE; GT; GTE; EQ; NEQ; AND; OR; LPAR; LBRAC; COMMA; RPAR; RBRAC ;ARROW ; DEF; DOT ;ASSIGN ; SEMICOLON ;THEN; ELSE; ELIF;]

  let level = ref (-1)  
  let last = ref SEMICOLON
  let indented = ref false 
  let last_line = ref (-1)


# 32 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\217\255\218\255\088\000\220\255\003\000\015\000\222\255\
    \223\255\225\255\226\255\230\255\012\000\232\255\235\255\236\255\
    \237\255\238\255\239\255\240\255\004\000\001\000\013\000\014\000\
    \015\000\016\000\250\255\030\000\045\000\047\000\254\255\255\255\
    \253\255\229\255\248\255\246\255\244\255\243\255\242\255\241\255\
    \227\255\051\000\192\000\020\001\027\000\254\255\004\000\169\000\
    \252\255\253\255\254\255\049\000\255\255\112\000\254\255\113\000\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\036\000\255\255\034\000\033\000\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\038\000\038\000\031\000\027\000\
    \010\000\008\000\255\255\004\000\003\000\006\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\036\000\036\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\003\000\255\255\000\000\255\255\000\000\
    ";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\045\000\000\000\255\255\048\000\
    \000\000\000\000\000\000\255\255\000\000\055\000\000\000\055\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\022\000\008\000\005\000\046\000\046\000\021\000\038\000\
    \019\000\018\000\026\000\028\000\013\000\027\000\010\000\029\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\012\000\011\000\025\000\023\000\024\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\040\000\037\000\036\000\035\000\034\000\007\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \032\000\030\000\041\000\015\000\033\000\014\000\031\000\003\000\
    \052\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\017\000\020\000\016\000\009\000\041\000\
    \039\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\054\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\049\000\000\000\000\000\000\000\042\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\051\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\000\000\000\000\000\000\043\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\041\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \255\255\255\255\000\000\043\000\000\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\050\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\005\000\046\000\044\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\012\000\022\000\023\000\024\000\025\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \028\000\029\000\041\000\000\000\027\000\000\000\029\000\000\000\
    \051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \020\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\053\000\055\000\255\255\255\255\255\255\255\255\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\047\000\255\255\255\255\255\255\003\000\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\047\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\044\000\255\255\255\255\255\255\042\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\043\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\255\255\
    \053\000\055\000\255\255\043\000\255\255\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\047\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "lexer.mll"
          ( comment lexbuf )
# 218 "lexer.ml"

  | 1 ->
# 46 "lexer.mll"
          ( comment2 lexbuf )
# 223 "lexer.ml"

  | 2 ->
# 47 "lexer.mll"
          ( [CONCAT])
# 228 "lexer.ml"

  | 3 ->
# 48 "lexer.mll"
          ( [PLUS])
# 233 "lexer.ml"

  | 4 ->
# 49 "lexer.mll"
          ( [MINUS])
# 238 "lexer.ml"

  | 5 ->
# 50 "lexer.mll"
          ( [MUL])
# 243 "lexer.ml"

  | 6 ->
# 51 "lexer.mll"
          ( [DIV])
# 248 "lexer.ml"

  | 7 ->
# 52 "lexer.mll"
          ( [LTE])
# 253 "lexer.ml"

  | 8 ->
# 53 "lexer.mll"
          ( [LT])
# 258 "lexer.ml"

  | 9 ->
# 54 "lexer.mll"
          ( [GTE])
# 263 "lexer.ml"

  | 10 ->
# 55 "lexer.mll"
          ( [GT])
# 268 "lexer.ml"

  | 11 ->
# 56 "lexer.mll"
          ( [EQ])
# 273 "lexer.ml"

  | 12 ->
# 57 "lexer.mll"
          ( [NEQ])
# 278 "lexer.ml"

  | 13 ->
# 58 "lexer.mll"
          ( [AND])
# 283 "lexer.ml"

  | 14 ->
# 59 "lexer.mll"
          ( [OR])
# 288 "lexer.ml"

  | 15 ->
# 60 "lexer.mll"
          ( [LPAR])
# 293 "lexer.ml"

  | 16 ->
# 61 "lexer.mll"
          ( [RPAR])
# 298 "lexer.ml"

  | 17 ->
# 62 "lexer.mll"
          ( [LBRAC])
# 303 "lexer.ml"

  | 18 ->
# 63 "lexer.mll"
          ( [SEMICOLON;RBRAC])
# 308 "lexer.ml"

  | 19 ->
# 64 "lexer.mll"
          ( [LSPAR])
# 313 "lexer.ml"

  | 20 ->
# 65 "lexer.mll"
          ( [RSPAR])
# 318 "lexer.ml"

  | 21 ->
# 66 "lexer.mll"
          ( [LHOOK])
# 323 "lexer.ml"

  | 22 ->
# 67 "lexer.mll"
          ( [RHOOK])
# 328 "lexer.ml"

  | 23 ->
# 68 "lexer.mll"
          ( [COMMA])
# 333 "lexer.ml"

  | 24 ->
# 69 "lexer.mll"
          ( [COLON])
# 338 "lexer.ml"

  | 25 ->
# 70 "lexer.mll"
          ( [SEMICOLON])
# 343 "lexer.ml"

  | 26 ->
# 71 "lexer.mll"
          ( [ARROW])
# 348 "lexer.ml"

  | 27 ->
# 72 "lexer.mll"
          ( [DEF])
# 353 "lexer.ml"

  | 28 ->
# 73 "lexer.mll"
          ( [ASSIGN])
# 358 "lexer.ml"

  | 29 ->
# 74 "lexer.mll"
          ( [DOT])
# 363 "lexer.ml"

  | 30 ->
# 75 "lexer.mll"
          ( [TILD])
# 368 "lexer.ml"

  | 31 ->
# 76 "lexer.mll"
          ( [EXCLAM])
# 373 "lexer.ml"

  | 32 ->
# 77 "lexer.mll"
          ( read_string lexbuf)
# 378 "lexer.ml"

  | 33 ->
let
# 78 "lexer.mll"
               s
# 384 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "lexer.mll"
                 (Printf.printf "hielo\n"; [INT (int_of_string s)] )
# 388 "lexer.ml"

  | 34 ->
let
# 79 "lexer.mll"
              s
# 394 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 79 "lexer.mll"
                (token lexbuf )
# 398 "lexer.ml"

  | 35 ->
# 80 "lexer.mll"
        ( token lexbuf )
# 403 "lexer.ml"

  | 36 ->
let
# 81 "lexer.mll"
             id
# 409 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 81 "lexer.mll"
                ( try [Hashtbl.find key_words id] with Not_found -> [IDENT id] )
# 413 "lexer.ml"

  | 37 ->
# 82 "lexer.mll"
        ( [SEMICOLON;EOF] )
# 418 "lexer.ml"

  | 38 ->
let
# 83 "lexer.mll"
         c
# 424 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 83 "lexer.mll"
           ( raise (Lexing_error ("error read: "^(String.make 1 c))) )
# 428 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 44
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 86 "lexer.mll"
           ( token lexbuf )
# 440 "lexer.ml"

  | 1 ->
# 87 "lexer.mll"
       ( comment lexbuf )
# 445 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment2 lexbuf =
   __ocaml_lex_comment2_rec lexbuf 47
and __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "lexer.mll"
         ( token lexbuf )
# 457 "lexer.ml"

  | 1 ->
# 91 "lexer.mll"
         ( raise(Lexing_error ("commentaire non finit")) )
# 462 "lexer.ml"

  | 2 ->
# 92 "lexer.mll"
       ( comment2 lexbuf)
# 467 "lexer.ml"

  | 3 ->
# 93 "lexer.mll"
         ( comment2 lexbuf )
# 472 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state

and read_string lexbuf =
   __ocaml_lex_read_string_rec lexbuf 53
and __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 96 "lexer.mll"
              s
# 485 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 96 "lexer.mll"
                ( [STRING s] )
# 489 "lexer.ml"

  | 1 ->
# 97 "lexer.mll"
        ( token lexbuf )
# 494 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state

;;

# 100 "lexer.mll"
    
   
  let next_token =
    let tokens = Queue.create () in
    let pile = Stack.create () in 
   Stack.push 0 pile;
    Queue.add SEMICOLON tokens; (* prochains lexèmes à renvoyer *)
    fun lb ->
        if Queue.is_empty tokens then begin
	  let l = token lb in
    let pos = Lexing.lexeme_start_p lb in 
    let line = pos.pos_lnum in 
    if (line <> !last_line) then begin    
          last_line := line;
          let c = pos.pos_cnum - pos.pos_bol in 
          let m = Stack.top pile in 
           if c > m then ( 
              if (not(List.mem (!last) fin_cont) && not(List.mem (List.nth l 0) debut_cont)) then (
                  Queue.add LBRAC tokens;
                  Stack.push c pile
                  )
              else ();
              if (!last = LBRAC) then Stack.push c pile else ()
            )
           else (
            
           )

    end;
	  List.iter (fun t -> Queue.add t tokens) l
        end;
        Queue.pop tokens

# 535 "lexer.ml"
