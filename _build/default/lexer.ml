# 4 "lexer.mll"
 
  open Lexing
  open Parser
  
  exception Lexing_error of string
    let kwd_tbl =
    ["if", IF;
     "else", ELSE;
     "elif", ELIF;
     "fn", FN;
     "fun", FUN;
     "return", RETURN; 
     "then", THEN;
     "val", VAL;
     "var", VAR;
        ]
  
  let fin_cont = [PLUS; MOINS; MUL; DIV; MOD; CONC ;INFS; INF; SUPS ;SUP ;EGAL; DIF ;ET; OU ;LPAR; LBRAC; VIR; ]
  let debut_cont = [PLUS; MOINS ;MUL; DIV; MOD; CONC; INFS; INF; SUPS; SUP; EGAL; DIF; ET; OU; LPAR; LBRAC; VIR; RPAR; RBRAC ;FLECHE; EGA; POINT ;POINTEGAL; POINTVIRG ;THEN; ELSE; ELIF;]

  let id_or_kwd =
    let h = Hashtbl.create 9 in
    List.iter (fun (s,t) -> Hashtbl.add h s t) kwd_tbl;
    fun s ->
      try Hashtbl.find h s with _ -> IDENT s
  let level = ref (-1)
  let last = ref IF
  let indented = ref false



# 34 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\227\255\087\000\229\255\002\000\231\255\002\000\
    \234\255\235\255\236\255\237\255\238\255\239\255\003\000\001\000\
    \003\000\004\000\005\000\006\000\250\255\006\000\005\000\007\000\
    \254\255\255\255\253\255\233\255\248\255\246\255\244\255\242\255\
    \241\255\240\255\232\255\011\000\001\000\254\255\003\000\009\000\
    \253\255\254\255\005\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\027\000\255\255\025\000\255\255\029\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\029\000\029\000\
    \029\000\012\000\010\000\008\000\255\255\004\000\003\000\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\000\000\255\255\
    \255\255\255\255\002\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\037\000\000\000\255\255\040\000\
    \000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\038\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\016\000\005\000\038\000\000\000\000\000\015\000\032\000\
    \013\000\011\000\020\000\022\000\009\000\021\000\006\000\023\000\
    \026\000\024\000\035\000\042\000\043\000\000\000\025\000\000\000\
    \000\000\000\000\007\000\008\000\019\000\017\000\018\000\034\000\
    \031\000\030\000\029\000\028\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\012\000\014\000\010\000\035\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\003\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\005\000\038\000\255\255\255\255\000\000\015\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\023\000\035\000\039\000\042\000\255\255\023\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\000\000\000\000\007\000\
    \016\000\017\000\018\000\019\000\021\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\255\255\255\255\255\255\255\255\003\000\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "lexer.mll"
         ( comment lexbuf )
# 168 "lexer.ml"

  | 1 ->
# 44 "lexer.mll"
        (comment2 lexbuf)
# 173 "lexer.ml"

  | 2 ->
# 45 "lexer.mll"
         (CONC)
# 178 "lexer.ml"

  | 3 ->
# 46 "lexer.mll"
       (PLUS)
# 183 "lexer.ml"

  | 4 ->
# 47 "lexer.mll"
       (MOINS )
# 188 "lexer.ml"

  | 5 ->
# 48 "lexer.mll"
       (MUL)
# 193 "lexer.ml"

  | 6 ->
# 49 "lexer.mll"
       (DIV)
# 198 "lexer.ml"

  | 7 ->
# 50 "lexer.mll"
        (INF)
# 203 "lexer.ml"

  | 8 ->
# 51 "lexer.mll"
       (INFS)
# 208 "lexer.ml"

  | 9 ->
# 52 "lexer.mll"
        (SUP)
# 213 "lexer.ml"

  | 10 ->
# 53 "lexer.mll"
       (SUPS)
# 218 "lexer.ml"

  | 11 ->
# 54 "lexer.mll"
        (EGAL)
# 223 "lexer.ml"

  | 12 ->
# 55 "lexer.mll"
       (EGA)
# 228 "lexer.ml"

  | 13 ->
# 56 "lexer.mll"
        (DIF)
# 233 "lexer.ml"

  | 14 ->
# 57 "lexer.mll"
        (ET)
# 238 "lexer.ml"

  | 15 ->
# 58 "lexer.mll"
        (OU)
# 243 "lexer.ml"

  | 16 ->
# 59 "lexer.mll"
       (LPAR)
# 248 "lexer.ml"

  | 17 ->
# 60 "lexer.mll"
       (LBRAC)
# 253 "lexer.ml"

  | 18 ->
# 61 "lexer.mll"
       (RPAR)
# 258 "lexer.ml"

  | 19 ->
# 62 "lexer.mll"
       (RBRAC)
# 263 "lexer.ml"

  | 20 ->
# 63 "lexer.mll"
       (VIR)
# 268 "lexer.ml"

  | 21 ->
# 64 "lexer.mll"
       (POINTVIRG)
# 273 "lexer.ml"

  | 22 ->
# 65 "lexer.mll"
        (FLECHE)
# 278 "lexer.ml"

  | 23 ->
# 66 "lexer.mll"
        (POINTEGAL)
# 283 "lexer.ml"

  | 24 ->
# 67 "lexer.mll"
       (POINT)
# 288 "lexer.ml"

  | 25 ->
let
# 68 "lexer.mll"
             s
# 294 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 68 "lexer.mll"
               (level := String.length s -1; token lexbuf)
# 298 "lexer.ml"

  | 26 ->
# 69 "lexer.mll"
       (token lexbuf)
# 303 "lexer.ml"

  | 27 ->
let
# 70 "lexer.mll"
             id
# 309 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
                (let next = id_or_kwd id in next )
# 313 "lexer.ml"

  | 28 ->
# 72 "lexer.mll"
       (EOF)
# 318 "lexer.ml"

  | 29 ->
let
# 73 "lexer.mll"
        c
# 324 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 73 "lexer.mll"
          (raise (Lexing_error ("error read: "^(String.make 1 c))) )
# 328 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 36
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 78 "lexer.mll"
             s
# 341 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "lexer.mll"
               (let level1 = String.length s -1  in Printf.printf "My tab level is %d\n" level1; token lexbuf)
# 345 "lexer.ml"

  | 1 ->
# 79 "lexer.mll"
       (comment lexbuf)
# 350 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment2 lexbuf =
   __ocaml_lex_comment2_rec lexbuf 39
and __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "lexer.mll"
        (token lexbuf)
# 362 "lexer.ml"

  | 1 ->
# 83 "lexer.mll"
       (raise(Lexing_error ("commentaire non finit")))
# 367 "lexer.ml"

  | 2 ->
# 84 "lexer.mll"
     (comment2 lexbuf)
# 372 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state

;;

