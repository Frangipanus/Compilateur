# 4 "lexer.mll"
 

  open Lexing
  open Parser
  
  exception Lexing_error of string

  let key_words = Hashtbl.create 11
  let () = Hashtbl.add key_words "if" IF
  let () = Hashtbl.add key_words "then" THEN
  let () = Hashtbl.add key_words "else" ELSE
  let () = Hashtbl.add key_words "elif" ELIF
  let () = Hashtbl.add key_words "fn" FN
  let () = Hashtbl.add key_words "fun" FUN
  let () = Hashtbl.add key_words "return" RETURN
  let () = Hashtbl.add key_words "val" VAL
  let () = Hashtbl.add key_words "var" VAR
  let () = Hashtbl.add key_words "true" TRUE
  let () = Hashtbl.add key_words "false" FALSE
  
  let fin_cont = [PLUS; MINUS; MUL; DIV; MOD; CONCAT ;LT ; LTE; GT ;GTE ;EQ; NEQ ;AND; OR ;LPAR; LBRAC; COMMA; ]
  let debut_cont = [PLUS; MINUS ;MUL; DIV; MOD; CONCAT; LT; LTE; GT; GTE; EQ; NEQ; AND; OR; LPAR; LBRAC; COMMA; RPAR; RBRAC ;ARROW ; DEF; DOT ;ASSIGN  ;THEN; ELSE; ELIF;]
  let level = ref (-1)  
  let last = ref SEMICOLON
  let indented = ref false 
  let last_line = ref (-1)


# 31 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\219\255\220\255\088\000\222\255\223\255\015\000\224\255\
    \225\255\227\255\228\255\232\255\012\000\234\255\235\255\236\255\
    \237\255\238\255\239\255\240\255\004\000\001\000\013\000\014\000\
    \015\000\016\000\250\255\030\000\045\000\047\000\254\255\255\255\
    \253\255\231\255\248\255\246\255\244\255\243\255\242\255\241\255\
    \229\255\221\255\192\000\250\000\078\001\136\001\027\000\254\255\
    \255\255\137\000\252\255\253\255\254\255\043\000\255\255\118\000\
    \255\255\051\001\052\001";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\034\000\255\255\255\255\031\000\255\255\
    \255\255\255\255\255\255\255\255\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\036\000\036\000\029\000\025\000\
    \010\000\008\000\255\255\004\000\003\000\006\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\034\000\034\000\034\000\034\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\047\000\000\000\
    \000\000\050\000\000\000\000\000\000\000\255\255\000\000\057\000\
    \000\000\058\000\058\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\022\000\008\000\000\000\000\000\048\000\021\000\038\000\
    \019\000\018\000\026\000\028\000\013\000\027\000\010\000\029\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\012\000\011\000\025\000\023\000\024\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\040\000\037\000\036\000\035\000\034\000\007\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \032\000\030\000\054\000\015\000\033\000\014\000\031\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\017\000\020\000\016\000\009\000\041\000\
    \039\000\000\000\000\000\000\000\000\000\043\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\051\000\000\000\000\000\000\000\000\000\
    \056\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\053\000\000\000\000\000\000\000\042\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\255\255\000\000\000\000\000\000\042\000\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\056\000\056\000\000\000\
    \000\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\041\000\255\255\000\000\
    \000\000\000\000\000\000\041\000\000\000\000\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \000\000\052\000\000\000\000\000\000\000\000\000\000\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\000\000\000\000\000\000\000\000\042\000\000\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\044\000\
    \000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\046\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\012\000\022\000\023\000\024\000\025\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \028\000\029\000\053\000\000\000\027\000\000\000\029\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \020\000\255\255\255\255\255\255\255\255\003\000\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\255\255\049\000\255\255\255\255\255\255\255\255\
    \055\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\049\000\255\255\255\255\255\255\003\000\
    \255\255\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\042\000\
    \255\255\255\255\255\255\255\255\255\255\042\000\255\255\255\255\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\046\000\255\255\255\255\255\255\042\000\
    \255\255\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\057\000\058\000\255\255\
    \255\255\043\000\255\255\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\044\000\055\000\255\255\
    \255\255\255\255\255\255\044\000\255\255\255\255\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \255\255\049\000\255\255\255\255\255\255\255\255\255\255\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\255\255\255\255\255\255\255\255\044\000\255\255\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\255\255\255\255\255\255\255\255\045\000\
    \255\255\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\057\000\058\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 43 "lexer.mll"
          ( comment lexbuf )
# 247 "lexer.ml"

  | 1 ->
# 44 "lexer.mll"
          ( comment2 lexbuf )
# 252 "lexer.ml"

  | 2 ->
# 45 "lexer.mll"
          ( [CONCAT] )
# 257 "lexer.ml"

  | 3 ->
# 46 "lexer.mll"
          ( [PLUS] )
# 262 "lexer.ml"

  | 4 ->
# 47 "lexer.mll"
          ( [MINUS] )
# 267 "lexer.ml"

  | 5 ->
# 48 "lexer.mll"
          ( [MUL] )
# 272 "lexer.ml"

  | 6 ->
# 49 "lexer.mll"
          ( [DIV] )
# 277 "lexer.ml"

  | 7 ->
# 50 "lexer.mll"
          ( [LTE] )
# 282 "lexer.ml"

  | 8 ->
# 51 "lexer.mll"
          ( [LT] )
# 287 "lexer.ml"

  | 9 ->
# 52 "lexer.mll"
          ( [GTE] )
# 292 "lexer.ml"

  | 10 ->
# 53 "lexer.mll"
          ( [GT] )
# 297 "lexer.ml"

  | 11 ->
# 54 "lexer.mll"
          ( [EQ] )
# 302 "lexer.ml"

  | 12 ->
# 55 "lexer.mll"
          ( [NEQ] )
# 307 "lexer.ml"

  | 13 ->
# 56 "lexer.mll"
          ( [AND] )
# 312 "lexer.ml"

  | 14 ->
# 57 "lexer.mll"
          ( [OR] )
# 317 "lexer.ml"

  | 15 ->
# 58 "lexer.mll"
          ( [LPAR] )
# 322 "lexer.ml"

  | 16 ->
# 59 "lexer.mll"
          ( [RPAR] )
# 327 "lexer.ml"

  | 17 ->
# 60 "lexer.mll"
          ( [LBRAC] )
# 332 "lexer.ml"

  | 18 ->
# 61 "lexer.mll"
          ( [SEMICOLON;RBRAC] )
# 337 "lexer.ml"

  | 19 ->
# 62 "lexer.mll"
          ( [LSPAR] )
# 342 "lexer.ml"

  | 20 ->
# 63 "lexer.mll"
          ( [RSPAR] )
# 347 "lexer.ml"

  | 21 ->
# 64 "lexer.mll"
          ( [COMMA] )
# 352 "lexer.ml"

  | 22 ->
# 65 "lexer.mll"
          ( [COLON] )
# 357 "lexer.ml"

  | 23 ->
# 66 "lexer.mll"
          ( [SEMICOLON] )
# 362 "lexer.ml"

  | 24 ->
# 67 "lexer.mll"
          ( [ARROW] )
# 367 "lexer.ml"

  | 25 ->
# 68 "lexer.mll"
          ( [DEF] )
# 372 "lexer.ml"

  | 26 ->
# 69 "lexer.mll"
          ( [ASSIGN] )
# 377 "lexer.ml"

  | 27 ->
# 70 "lexer.mll"
          ( [DOT] )
# 382 "lexer.ml"

  | 28 ->
# 71 "lexer.mll"
          ( [TILD] )
# 387 "lexer.ml"

  | 29 ->
# 72 "lexer.mll"
          ( [EXCLAM] )
# 392 "lexer.ml"

  | 30 ->
# 73 "lexer.mll"
          ( read_string lexbuf )
# 397 "lexer.ml"

  | 31 ->
let
# 74 "lexer.mll"
               s
# 403 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 74 "lexer.mll"
                 ( [INT (int_of_string s)] )
# 407 "lexer.ml"

  | 32 ->
# 75 "lexer.mll"
        (Lexing.new_line lexbuf; token lexbuf)
# 412 "lexer.ml"

  | 33 ->
# 76 "lexer.mll"
        ( token lexbuf )
# 417 "lexer.ml"

  | 34 ->
let
# 77 "lexer.mll"
             id
# 423 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 77 "lexer.mll"
                ( try [Hashtbl.find key_words id] with Not_found -> [IDENT id] )
# 427 "lexer.ml"

  | 35 ->
# 78 "lexer.mll"
        ( [SEMICOLON;EOF] )
# 432 "lexer.ml"

  | 36 ->
let
# 79 "lexer.mll"
         c
# 438 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 79 "lexer.mll"
           ( raise (Lexing_error ("error read: "^(String.make 1 c))) )
# 442 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 46
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "lexer.mll"
         (Lexing.new_line lexbuf;  token lexbuf )
# 454 "lexer.ml"

  | 1 ->
# 83 "lexer.mll"
       ( comment lexbuf )
# 459 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment2 lexbuf =
   __ocaml_lex_comment2_rec lexbuf 49
and __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 86 "lexer.mll"
         ( token lexbuf )
# 471 "lexer.ml"

  | 1 ->
# 87 "lexer.mll"
         ( raise(Lexing_error ("commentaire non finit")) )
# 476 "lexer.ml"

  | 2 ->
# 88 "lexer.mll"
         (Lexing.new_line lexbuf; comment2 lexbuf )
# 481 "lexer.ml"

  | 3 ->
# 89 "lexer.mll"
         ( comment2 lexbuf )
# 486 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment2_rec lexbuf __ocaml_lex_state

and read_string lexbuf =
   __ocaml_lex_read_string_rec lexbuf 55
and __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 92 "lexer.mll"
                  s
# 499 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 92 "lexer.mll"
                    ( [STRING s] )
# 503 "lexer.ml"

  | 1 ->
# 93 "lexer.mll"
     (raise (Lexing_error("error: wtf comment t'a fait?")))
# 508 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec lexbuf __ocaml_lex_state

;;

# 95 "lexer.mll"
  
  let next_token =
    let tokens = Queue.create () in
    let pile = Stack.create () in 
    Stack.push 0 pile;
    Queue.add SEMICOLON tokens; (* prochains lexèmes à renvoyer *)
    fun lb ->
      
      if Queue.is_empty tokens then begin
      
        let next = token lb in
        let pos = Lexing.lexeme_start_p lb in 
        let line = pos.pos_lnum in 
        if (line <> !last_line) then begin    
              last_line := line;
              let c = pos.pos_cnum - pos.pos_bol in 
              let m = ref (Stack.top pile) in 
              if c > !m then ( 
                  if (not (List.mem (!last) fin_cont) &&  (not(List.mem (List.nth next 0) debut_cont))) then (
                      Queue.add LBRAC tokens;
                      Stack.push c pile;
                      );
                  if (!last = LBRAC) then Stack.push c pile
                )
              else (
                while c < !m do
                  
                  let _ = Stack.pop pile in  
                  m := Stack.top pile;
                  if (List.length next == 2 && List.nth next 1 = RBRAC) then () else ( Queue.add SEMICOLON tokens; Queue.add RBRAC tokens)
                done;
                if c > !m then raise(Lexing_error("Erreur d'indentation"));
                if (not (List.mem (!last) fin_cont) && not (List.mem (List.nth next 0) debut_cont)) then
                  Queue.add SEMICOLON tokens;
              )
        end;
        
	      List.iter (fun t -> Queue.add t tokens) next
      end;
      let acc = Queue.pop tokens in 
      last := acc;
      acc

# 559 "lexer.ml"
